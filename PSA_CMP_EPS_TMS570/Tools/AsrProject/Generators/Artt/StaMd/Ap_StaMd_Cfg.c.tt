<#@ AutosarXml processor="ArDirectiveProcessor" requires="arPrefix='ar';arNamespace='http://autosar.org/2.1.2'" #>
<#@ template inherits="AutosarDirectiveProcessor.ArGtcBase" debug="false" #>
<#@ output extension="" #>
<#@ include file="Helper.tt" #>
/*****************************************************************************
* Copyright 2010 Nxtr Automotive, All Rights Reserved.
* Nxtr Confidential
*
* Module File Name  : Ap_StaMd_Cfg.c
* Module Description: Configuration file of StaMd module
* Product           : Gen II Plus - EA3.0
* Generator         : <#= GeneratorName #> <#= GeneratorVersion #>
* Generation Time   : <#= DateTime.Now.ToString( "dd.MM.yyyy HH:mm:ss" ) #>
*****************************************************************************/
/* Version Control:
 * Date Created:      Fri Jul 13 18:34:17 2012
 * %version:          2 %
 * %date_modified:    Thu Feb  6 22:58:36 2014 %
 *---------------------------------------------------------------------------------------------------------------------
 * Date      Rev      Author         Change Description                                                        SCR #
 * -------   -------  --------  ---------------------------------------------------------------------------  ----------
 * 10/10/12   1       LWW       Initial template creation
 * 10/24/12   2       LWW       Added exclude configuration for applications to skip generation
 * 06/05/13   3       KJS       Added support for SysC global variables
 * 02/03/14   4       BDO       Add FBLTransitionActive to support FDD ES10B v13                               9674              
 */

<#
	ChangeContext( Xp.ModuleConfAtDefRefTo( "StaMd" ) );
	string staMdCoreApp = LastValueSegmentOf( Xp.ValueRefAtDefRefTo( "StaMdGeneral/StaMdCoreOsAppRef" ));
	string staMdSComApp = LastValueSegmentOf( Xp.ValueRefAtDefRefTo( "StaMdGeneral/StaMdSComOsAppRef" ));
	string staMdSysCovApp = LastValueSegmentOf( Xp.ValueRefAtDefRefTo( "StaMdGeneral/StaMdSysCovOsAppRef" ));
	string staMdTODType = ValueOf( Xp.ValueAtDefRefTo( "StaMdGeneral/StaMdTODType" ));
	List<string> excludeAppList = new List<string>();
#>
<# ChangeContext( Xp.ModuleConfAtDefRefTo( "StaMd" ) ); #>
<# !LOOP( Xp.ValueRefAtDefRefTo( "StaMdGeneral/GenerateExcludeOsAppRef" ) ) #>
<#excludeAppList.Add(LastValueSegmentOf( "." ));#>
<# !ENDLOOP #>
/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/
#define STAMD_C /* Enable visibility to Module internal definitions in StaMd.h*/
#include "Ap_StaMd_Cfg.h"


/*******************************************************************************
**                      Module Private Data                                   **
*******************************************************************************/
<#  
	int osAppCnt = 0;
	string osApp;
	string[] osAppWords;
	string osAppSuffix;
	int i = 0;
	bool excludedApp;
	List<string> AppSystemStateList = new List<string>();
	List<string> WIMilestoneRqstList = new List<string>();
	List<string> AppTypeHInfoList = new List<string>();
	ChangeContext( Xp.ModuleConfAtDefRefTo( "Os" ) ); 
#> 
<# !LOOP( Xp.ContainerAtDefRefTo( "OsApplication" ) ) #>
<#  osApp = ValueOf( "ar:SHORT-NAME" );
	/* Assume the Application short name is the last "word" in the Os Application name delimited with '_' */
	osAppWords = osApp.Split('_');
	osAppSuffix = osAppWords[osAppWords.Length -1];
	osAppCnt++;
	AppTypeHInfoList.Add( "{&Lnk_TypeH" + osAppSuffix + "_Start, " + "(uint32)&Lnk_TypeH" + osAppSuffix + "_Size}");
	i = 0; 
	excludedApp = false;
	while(i < excludeAppList.Count)
	{
		if (osApp == excludeAppList[i])
		{
		excludedApp = true;
		}
		i++;
	}
	if (excludedApp == false)
	{
		if (staMdCoreApp != osApp)
		{
			AppSystemStateList.Add( "&SystemState" + osAppSuffix + "_Cnt_M_enum");
			WIMilestoneRqstList.Add( "&WarmInitMilestoneRqst" + osAppSuffix + "_Cnt_M_u32");	
		}
		else
		{
			AppSystemStateList.Add( "&SystemState_Cnt_M_enum");
			WIMilestoneRqstList.Add( "&WarmInitMilestoneRqst_Cnt_M_u32");
		}
#>
#define STAMD<#=osAppSuffix#>_START_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"
<#if(staMdCoreApp == osApp){#>	
	VAR(Rte_ModeType_StaMd_Mode, AP_STAMD_VAR) SystemState_Cnt_M_enum = RTE_MODE_StaMd_Mode_WARMINIT;
<#}else{#>
	VAR(Rte_ModeType_StaMd_Mode, AP_STAMD_VAR) SystemState<#=osAppSuffix#>_Cnt_M_enum = RTE_MODE_StaMd_Mode_WARMINIT;
<#}#>
<#if(staMdSysCovApp == osApp){#>
	VAR(Rte_ModeType_StaMd_Mode, AP_STAMD_VAR) SysCSystemState_Cnt_M_enum = RTE_MODE_StaMd_Mode_WARMINIT;
<#}#>
#define STAMD<#=osAppSuffix#>_STOP_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"

<#if(staMdSysCovApp == osApp){#>
#define STAMD<#=osAppSuffix#>_START_SEC_VAR_CLEARED_16
#include "MemMap.h"
	VAR(uint16, AP_STAMD_VAR) StaMdsSysCFltCntr_Cnt_M_u16;
#define STAMD<#=osAppSuffix#>_STOP_SEC_VAR_CLEARED_16
#include "MemMap.h"
<#}#>

#define STAMD<#=osAppSuffix#>_START_SEC_VAR_CLEARED_32
#include "MemMap.h"
<#if(staMdCoreApp == osApp){#>	
	VAR(uint32, AP_STAMD_VAR) WarmInitMilestoneRqst_Cnt_M_u32;
<#}else{#>
	VAR(uint32, AP_STAMD_VAR) WarmInitMilestoneRqst<#=osAppSuffix#>_Cnt_M_u32;
<#}#>
#define STAMD<#=osAppSuffix#>_STOP_SEC_VAR_CLEARED_32
#include "MemMap.h"

<#if(staMdSComApp == osApp){#>	
#define STAMD<#=osAppSuffix#>_START_SEC_VAR_CLEARED_BOOLEAN
#include "MemMap.h"
	VAR(boolean, AP_STAMD_VAR) EcuResetActive_Cnt_M_lgc;
	VAR(boolean, AP_STAMD_VAR) FBLTransitionActive_Cnt_M_lgc;
#define STAMD<#=osAppSuffix#>_STOP_SEC_VAR_CLEARED_BOOLEAN
#include "MemMap.h"
<#}#>
<#if(staMdCoreApp == osApp){#>	
#define STAMD<#=osAppSuffix#>_START_SEC_VAR_CLEARED_BOOLEAN
#include "MemMap.h"
<#if(staMdTODType != "TOD_None"){#>	
	VAR(boolean, AP_STAMD_VAR) StopTODPerOperation_Cnt_M_lgc;
<#}#>
<#if(staMdTODType == "TOD_2msToggle"){#>	
	VAR(boolean, AP_STAMD_VAR) TODState_Cnt_M_lgc;
<#}#>
	VAR(boolean, AP_STAMD_VAR) FinalNvMWriteInProgress_Cnt_M_lgc;
	VAR(boolean, AP_STAMD_VAR) TransitionComplete_Cnt_M_lgc;
#define STAMD<#=osAppSuffix#>_STOP_SEC_VAR_CLEARED_BOOLEAN
#include "MemMap.h"
<#}#>

<#if(staMdCoreApp == osApp){#>	
#define STAMD<#=osAppSuffix#>_START_SEC_VAR_CLEARED_8
#include "MemMap.h"
	volatile VAR(uint8, AP_STAMD_VAR) StTrnsVctr_Cnt_D_b08;
#define STAMD<#=osAppSuffix#>_STOP_SEC_VAR_CLEARED_8
#include "MemMap.h"
<#}#>
<#}#>
<# !ENDLOOP #>
CONST(TypeHInfoType_Str, AP_STAMD_CONST) T_TypeHInfo_Cnt_Str[<#=osAppCnt#>] = {
<# foreach (string AppTypeHInfo in AppTypeHInfoList) {#>
	<#=AppTypeHInfo #>,
<# } #>};
CONSTP2VAR(Rte_ModeType_StaMd_Mode, AUTOMATIC, AP_STAMD_CONST) T_CurrentSystemState_Ptr_enum[<#=osAppCnt-excludeAppList.Count#>] = {
<# foreach (string AppSystemStateVal in AppSystemStateList) {#>
	<#=AppSystemStateVal #>,
<# } #>};
CONSTP2VAR(uint32, AUTOMATIC, AP_STAMD_CONST) T_WarmInitMilestoneRqst_Ptr_enum[<#=osAppCnt-excludeAppList.Count#>] = {
<# foreach (string AppWIMilestoneVal in WIMilestoneRqstList) {#>
	<#=AppWIMilestoneVal #>,
<# } #>};
