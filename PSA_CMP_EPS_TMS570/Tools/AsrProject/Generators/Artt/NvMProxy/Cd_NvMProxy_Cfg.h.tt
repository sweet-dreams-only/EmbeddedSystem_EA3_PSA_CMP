<#@ AutosarXml processor="ArDirectiveProcessor" requires="arPrefix='ar';arNamespace='http://autosar.org/2.1.2'" #>
<#@ template inherits="AutosarDirectiveProcessor.ArGtcBase" debug="false" #>
<#@ output extension="" #>
<#@ include file="Helper.tt" #>
/*****************************************************************************
* Copyright 2010 Nxtr Automotive, All Rights Reserved.
* Nxtr Confidential
*
* Module File Name  : Cd_NvMProxy_Cfg.h
* Module Description: Configuration of the Cd_NvMProxy BSW
* Product           : Gen II Plus - EA3.0
* Author            : Jeremy Warmbier
*****************************************************************************/
/*---------------------------------------------------------------------------
 * Version Control:
 * Date Created:      Tue Feb  7 11:23:49 2012
 * %version:          1 %
 * %derived_by:       nzx5jd %
 * %date_modified:    Thu Feb 27 10:09:51 2014 % 
 *---------------------------------------------------------------------------------------------------------------------
 * Date      Rev      Author         Change Description                                                        SCR #
 * -------   -------  --------  ---------------------------------------------------------------------------  ----------
 * 02/07/12   1        JJW       Initial creation
 * 10/17/12   2        JJW       Generated output file
 * 05/30/13   3        JJW       Removed unsuported config feature, added multi-block support
 * 11/21/13   4        LWW       Added Redundant and CRC checking options
 */

#ifndef NVMPROXY_CFG_H
#define NVMPROXY_CFG_H

<#	ChangeContext( Xp.ModuleConfAtDefRefTo( "NvMProxy" ) ); #>
<# string nvmproxy_failureapi = ValueOf( Xp.ValueAtDefRefTo( "NvMProxyGeneral/FailureAPI" ) ); #>

/* Include defs for data block types */
#ifndef _RTE_TYPE_H
	#define RTE_MICROSAR_PIM_EXPORT /* Define the Rte constant to allow exporting of PIM types to this CDD */
	#include "Rte_Type.h"
#endif
#include "NvM.h"
#include "Ap_DiagMgr.h"
<#     !LOOP( Xp.ValueAtDefRefTo( "NvMProxyGeneral/NvMProxyIncludes" ) ) #>
#include "<#=ValueOf( "." )#>"
<#     !ENDLOOP #>
<# int numberOfBlocks = 1; /* always 1 block for the multi-block support */ #>

#define D_CRC16SIZE_CNT_U16		2

<# !LOOP( Xp.ContainerAtDefRefTo( "NvMProxyConfigSet" ) ) #>
<#
	numberOfBlocks += Count( Xp.ContainerAtDefRefTo( "NvMProxyBlock" ) ); 
#>
<# !ENDLOOP #>

typedef P2CONST(uint8, AUTOMATIC, AUTOMATIC) NvMP_FailActionDataType;
typedef P2FUNC(void, AUTOMATIC, NvMP_FailActFuncType)(void);

typedef enum {
	NVMPROXY_NONE = 0x00,
	NVMPROXY_CRC16 = 0x01,
	NVMPROXY_REDUNDANT = 0x02,
	NVMPROXY_ZERODATA = 0x03
}NvMProxy_InitHandling;

typedef enum {
	NVMPROXY_NOTAPPLICABLE = 0x00,
	NVMPROXY_NTC_0A = 0x01,
	NVMPROXY_NTC_08_ROMDEF = 0x02,
	NVMPROXY_NTC_08_NOTIFFUNC = 0x03,
	NVMPROXY_NTC_07_ROMDEF = 0x04,
	NVMPROXY_NTC_07_NOTIFFUNC = 0x05,
	NVMPROXY_NTC_06_ROMDEF = 0x06,
	NVMPROXY_NTC_06_NOTIFFUNC = 0x07
}NvMProxy_FailResponse;

typedef struct {
	CONST(NvM_BlockIdType, AUTOMATIC) NvMBlock;
	CONSTP2VAR(uint8, AUTOMATIC, AUTOMATIC) unsecurePtr;
	CONSTP2VAR(uint8, AUTOMATIC, AUTOMATIC) securePtr;
	CONST(uint16, AUTOMATIC) secureSize;
	CONST(NvMProxy_InitHandling, AUTOMTIC) initHandling;
	CONST(NvMProxy_FailResponse, AUTOMTIC) failResponse;
	CONST(NvMP_FailActionDataType, AUTOMATIC) failActData;
	CONST(NvMP_FailActFuncType, AUTOMATIC) failActFunc;
} NvMProxyCfg_Type;

#define D_NUMPRXYBLOCKS_CNT_U16    		<#=numberOfBlocks#>u
#define NVMPROXY_REPORTERRORSTATUS		<#= nvmproxy_failureapi #>

extern CONST(NvMProxyCfg_Type, AUTOMATIC) NvMProxyCfg[D_NUMPRXYBLOCKS_CNT_U16];

/* Only provide externs if PIM Export is defined (won't compile otherwise) */
#ifdef RTE_MICROSAR_PIM_EXPORT
<# !LOOP( Xp.ContainerAtDefRefTo( "NvMProxyBlock" ) ) #>
<#	string secureBlockName = ValueOf( Xp.ValueAtDefRefTo( "NvmRamBlockDataAddressSecure" )); 
	string initBlockHandling = ValueOf( Xp.ValueAtDefRefTo( "InitBlockHandling" ) );
	string initCheckFailResponse = ValueOf( Xp.ValueAtDefRefTo( "InitCheckFailResponse" ) );
	string failactionsymbol = ValueOf( Xp.ValueAtDefRefTo( "ROMDefault_Or_NotificationFunction_Symbol" ) );
	bool nvmRamGlobalShared = ValueOf( Xp.ValueAtDefRefTo( "NvMRamGlobalShared" ) );#>
<# if ( initBlockHandling == "CRC16" ) { 
 if ( nvmRamGlobalShared == false) { #>
extern VAR(uint8, AUTOMATIC) NvMP_<#=secureBlockName#>[sizeof(<#=secureBlockName#>)+D_CRC16SIZE_CNT_U16];
<# } 
 if (( initCheckFailResponse == "SetNTC_0x08_LoadROMDefaults" ) || ( initCheckFailResponse == "SetNTC_0x07_LoadROMDefaults" ) || ( initCheckFailResponse == "SetNTC_0x06_LoadROMDefaults" )) { #>
#ifdef NVMPROXY_C
extern const uint8 <#=failactionsymbol#>[sizeof(<#=secureBlockName#>)];
#endif <# } else if (( initCheckFailResponse == "SetNTC_0x08_CallNotificationFunction" ) || ( initCheckFailResponse == "SetNTC_0x07_CallNotificationFunction" ) || ( initCheckFailResponse == "SetNTC_0x06_CallNotificationFunction" )){ #>	
#ifdef NVMPROXY_C
extern void <#=failactionsymbol#>(void);
#endif <# } else {} 
 } else if ( initBlockHandling == "Redundant" ){ 
 if ( nvmRamGlobalShared == false) { #>
extern VAR(uint8, AUTOMATIC) NvMP_<#=secureBlockName#>[sizeof(<#=secureBlockName#>)+sizeof(<#=secureBlockName#>)];
<# } 
 if (( initCheckFailResponse == "SetNTC_0x08_LoadROMDefaults" ) || ( initCheckFailResponse == "SetNTC_0x07_LoadROMDefaults" ) || ( initCheckFailResponse == "SetNTC_0x06_LoadROMDefaults" )) { #>
#ifdef NVMPROXY_C
extern const uint8 <#=failactionsymbol#>[sizeof(<#=secureBlockName#>)];
#endif <# } else if (( initCheckFailResponse == "SetNTC_0x08_CallNotificationFunction" ) || ( initCheckFailResponse == "SetNTC_0x07_CallNotificationFunction" ) || ( initCheckFailResponse == "SetNTC_0x06_CallNotificationFunction" )){ #>
#ifdef NVMPROXY_C
extern void <#=failactionsymbol#>(void);
#endif <# } else {} 
 } else { 
 if ( nvmRamGlobalShared == false) { #>
extern VAR(uint8, AUTOMATIC) NvMP_<#=secureBlockName#>[sizeof(<#=secureBlockName#>)];<# } 
 } #>

<# !ENDLOOP #>
#endif

#endif
