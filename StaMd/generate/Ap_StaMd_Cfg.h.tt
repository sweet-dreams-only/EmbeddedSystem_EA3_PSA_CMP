<#@ AutosarXml processor="ArDirectiveProcessor" requires="arPrefix='ar';arNamespace='http://autosar.org/2.1.2'" #>
<#@ template inherits="AutosarDirectiveProcessor.ArGtcBase" debug="false" #>
<#@ output extension="" #>
<#@ include file="Helper.tt" #>
/*****************************************************************************
* Copyright 2010 Nxtr Automotive, All Rights Reserved.
* Nxtr Confidential
*
* Module File Name  : Ap_StaMd_Cfg.h
* Module Description: Configuration file of StaMd module
* Product           : Gen II Plus - EA3.0
* Generator         : <#= GeneratorName #> <#= GeneratorVersion #>
* Generation Time   : <#= DateTime.Now.ToString( "dd.MM.yyyy HH:mm:ss" ) #>
*****************************************************************************/
/* Version Control:
 * Date Created:      Fri Jul 13 18:34:17 2012
 * %version:          9 %
 * %date_modified:    Thu Feb  6 22:58:46 2014 %
 *---------------------------------------------------------------------------------------------------------------------
 * Date      Rev      Author         Change Description                                                        SCR #
 * -------   -------  --------  ---------------------------------------------------------------------------  ----------
 * 10/10/12   1       LWW       Initial template creation
 * 10/24/12   3       LWW       Added exclude configuration for applications to skip generation
 * 10/27/12   4       LWW       Added configurable NvM Writeall define
 * 05/30/13   5       KJS       Added support for client/server or task/runnable support for DiagMgr calls
 * 06/05/13   6       KJS       Changed prototype for the system state check function.
 * 06/27/13   7	      LWW       Anomaly 5205 fix
 * 12/11/13   8	      BDO       Updates to add configurable parameter: staMdNvMGetErrorStatusAPI               11065
 * 02/03/14   9       BDO       Add FBLTransitionActive to support FDD ES10B v13                               9674  
 */

#ifndef AP_STAMD_CFG_H
#define AP_STAMD_CFG_H

<#
	ChangeContext( Xp.ModuleConfAtDefRefTo( "DiagMgr" ) );
	string diagMgrDemIfApp = LastValueSegmentOf( Xp.ValueRefAtDefRefTo( "DiagMgrGeneral/DiagMgrDemIfOsAppRef" ));
	
	ChangeContext( Xp.ModuleConfAtDefRefTo( "StaMd" ) );
	string staMdCoreApp = LastValueSegmentOf( Xp.ValueRefAtDefRefTo( "StaMdGeneral/StaMdCoreOsAppRef" ));
	string staMdSComApp = LastValueSegmentOf( Xp.ValueRefAtDefRefTo( "StaMdGeneral/StaMdSComOsAppRef" ));
	string staMdSysCovApp = LastValueSegmentOf( Xp.ValueRefAtDefRefTo( "StaMdGeneral/StaMdSysCovOsAppRef" ));
	string typeHDataSize = ValueOf( Xp.ValueAtDefRefTo( "StaMdGeneral/TypeHDataSize" ));
	string staMdTODType = ValueOf( Xp.ValueAtDefRefTo( "StaMdGeneral/StaMdTODType" ));
	string staMdNvMWriteAllAPI = ValueOf(Xp.ValueAtDefRefTo( "StaMdGeneral/StaMdNvMWriteAllAPI" ));
	string staMdNvMGetErrorStatusAPI = ValueOf(Xp.ValueAtDefRefTo( "StaMdGeneral/StaMdNvMGetErrorStatusAPI" ));
	string staMdTrnsDiagMgrShtDwnTaskActivation = "No_Task";
	Dictionary<string, bool> CPEnableDic = new Dictionary<string, bool>();
	List<string> excludeAppList = new List<string>();

	if(staMdCoreApp != diagMgrDemIfApp)
	{
		staMdTrnsDiagMgrShtDwnTaskActivation =  LastValueSegmentOf(Xp.ValueRefAtDefRefTo( "StaMdGeneral/StaMdTrnsDiagMgrShtDwnTaskActivation" ));
	}
#>

<# ChangeContext( Xp.ModuleConfAtDefRefTo( "StaMd" ) ); #>
<# !LOOP( Xp.ValueRefAtDefRefTo( "StaMdGeneral/GenerateExcludeOsAppRef" ) ) #>
<#excludeAppList.Add(LastValueSegmentOf( "." ));#>
<# !ENDLOOP #>
/*** Public Part (used by StaMd API) *****************************************/
#include "Std_Types.h"                   /* Standard type definitions      */
#include "Rte_Type.h"                    /* RTE type definitions      */

	#define D_TYPEHDATASIZE_CNT_U16                <#=typeHDataSize+"U"#>
	#define NVMWRITEALLFUNC                        <#=staMdNvMWriteAllAPI#>
	#define NVMGETERRORSTATUS                      <#=staMdNvMGetErrorStatusAPI#>	
	
<#if(staMdCoreApp == diagMgrDemIfApp){#>
	#define D_STAMD_DIAGMGR_CLIENTSERVER_CALL		STD_ON
<#}else{#>
	#define D_STAMD_DIAGMGR_CLIENTSERVER_CALL		STD_OFF
	#define D_DIAGMGR_SHUTDOWN_TASK                 <#=staMdTrnsDiagMgrShtDwnTaskActivation#>
<#}#>
	
<#if(staMdTODType == "TOD_2msToggle"){#>	
	#define BC_STAMD_TOD2MSTOGGLE					STD_ON
	#define BC_STAMD_TODSTEADYSTATE					STD_OFF
<#}else if(staMdTODType == "TOD_SteadyState"){#>	
	#define BC_STAMD_TOD2MSTOGGLE					STD_OFF
	#define BC_STAMD_TODSTEADYSTATE					STD_ON
<#}else{#>	
	#define BC_STAMD_TOD2MSTOGGLE					STD_OFF
	#define BC_STAMD_TODSTEADYSTATE					STD_OFF
<#}#>	

<#if(staMdSysCovApp == staMdCoreApp){#>
	#define BC_STAMD_SYSCHKINCOREAPP				STD_ON
<#}else{#>
	#define BC_STAMD_SYSCHKINCOREAPP				STD_OFF
<#}#>	

	extern VAR(uint32, AP_DIAGMGR_VAR) CloseCheck_Cnt_u32;
	extern VAR(uint8, AP_DIAGMGR_VAR) TypeHData_Cnt_u08[D_TYPEHDATASIZE_CNT_U16];
	
/*** Private Part (used by StaMd.c only) *************************************/
#ifdef STAMD_C

typedef struct {
   	uint8* Start;
	uint32 Size;
} TypeHInfoType_Str;

<#  
	int osAppCnt = 0;
	int i = 0;
	bool excludedApp;
	string osApp;
	string[] osAppWords;
	string osAppSuffix;
	ChangeContext( Xp.ModuleConfAtDefRefTo( "Os" ) ); 
#> 
<# !LOOP( Xp.ContainerAtDefRefTo( "OsApplication" ) ) #>
<#  osApp = ValueOf( "ar:SHORT-NAME" );
/* Assume the Application short name is the last "word" in the Os Application name delimited with '_' */
	osAppWords = osApp.Split('_');
	osAppSuffix = osAppWords[osAppWords.Length -1];
	osAppCnt++;#>
	extern uint8 Lnk_TypeH<#=osAppSuffix#>_Start;
	extern uint32* Lnk_TypeH<#=osAppSuffix#>_Size;
<# 	i = 0; 
	excludedApp = false;
	while(i < excludeAppList.Count)
	{
		if (osApp == excludeAppList[i])
		{
		excludedApp = true;
		}
		i++;
	}
	
	if (excludedApp == false)
	{
		if (osApp != staMdCoreApp)
		{
			CPEnableDic.Add( "StaMd"+osAppSuffix+"_Per1_CP0", false);
			CPEnableDic.Add( "StaMd"+osAppSuffix+"_Per1_CP1", false);
		}
		else
		{
			CPEnableDic.Add( "StaMd_Per1_CP0", false);
			CPEnableDic.Add( "StaMd_Per1_CP1", false);
		}
#>
	
	
<#if(staMdSComApp == osApp){#>	
	extern VAR(boolean, AP_STAMD_VAR) EcuResetActive_Cnt_M_lgc;
	extern VAR(boolean, AP_STAMD_VAR) FBLTransitionActive_Cnt_M_lgc;
<#}#>
<#if(staMdSysCovApp == osApp){#>
	extern VAR(Rte_ModeType_StaMd_Mode, AP_STAMD_VAR) SysCSystemState_Cnt_M_enum;
	extern VAR(uint16, AP_STAMD_VAR) StaMdsSysCFltCntr_Cnt_M_u16;
<#}#>
<#if(staMdCoreApp == osApp){#>	
<#if(staMdTODType != "TOD_None"){#>	
	extern VAR(boolean, AP_STAMD_VAR) StopTODPerOperation_Cnt_M_lgc;
<#}#>
<#if(staMdTODType == "TOD_2msToggle"){#>	
	extern VAR(boolean, AP_STAMD_VAR) TODState_Cnt_M_lgc;
<#}#>
	extern VAR(Rte_ModeType_StaMd_Mode, AP_STAMD_VAR) SystemState_Cnt_M_enum;
<#}else{#>
	extern VAR(Rte_ModeType_StaMd_Mode, AP_STAMD_VAR) SystemState<#=osAppSuffix#>_Cnt_M_enum;
<#}#>
<#if(staMdCoreApp == osApp){#>	
	extern VAR(uint32, AP_STAMD_VAR) WarmInitMilestoneRqst_Cnt_M_u32;
<#}else{#>
	extern VAR(uint32, AP_STAMD_VAR) WarmInitMilestoneRqst<#=osAppSuffix#>_Cnt_M_u32;
<#}#>
<#}#>
<# !ENDLOOP #>
	extern CONST(TypeHInfoType_Str, AP_STAMD_CONST) T_TypeHInfo_Cnt_Str[<#=osAppCnt#>];
	extern CONSTP2VAR(Rte_ModeType_StaMd_Mode, AUTOMATIC, AP_STAMD_CONST) T_CurrentSystemState_Ptr_enum[<#=osAppCnt-excludeAppList.Count#>];
	extern CONSTP2VAR(uint32, AUTOMATIC, AP_STAMD_CONST) T_WarmInitMilestoneRqst_Ptr_enum[<#=osAppCnt-excludeAppList.Count#>];
	extern volatile VAR(uint8, AP_STAMD_VAR) StTrnsVctr_Cnt_D_b08;
	extern VAR(boolean, AP_STAMD_VAR) FinalNvMWriteInProgress_Cnt_M_lgc;
	extern VAR(boolean, AP_STAMD_VAR) TransitionComplete_Cnt_M_lgc;
	extern FUNC(void, DEM_CODE) Dem_Shutdown(void);
	extern FUNC(void, NVM_PUBLIC_CODE) <#=staMdNvMWriteAllAPI#>(void);
	extern FUNC(void, RTE_NVMPROXY_APPL_CODE) <#=staMdNvMGetErrorStatusAPI#>(UInt8 parg0, P2VAR(NvM_RequestResultType, AUTOMATIC, RTE_NVMPROXY_APPL_VAR) ErrorStatus);
	extern FUNC(void, MCU_CODE) Mcu_PerformReset(void);
	extern FUNC(NxtrDiagMgrStatus, RTE_AP_STAMD_APPL_CODE) SystemStateCheck(	VAR(boolean, AUTOMATIC) FTermActive_Cnt_T_lgc,
																				VAR(boolean, AUTOMATIC) CTermActive_Cnt_T_lgc,
																				VAR(boolean, AUTOMATIC) ATermActive_Cnt_T_lgc,
																				VAR(boolean, AUTOMATIC) RampStatusCmp_Cnt_T_lgc,
																				VAR(boolean, AUTOMATIC) CtrldDmpStsCmp_Cnt_T_lgc,
																				VAR(boolean, AUTOMATIC) TMFTestComplete_Cnt_T_lgc,
																				P2VAR(uint16, AUTOMATIC, AUTOMATIC) SysCFltCntr_Ptr_T_u16);

<# ChangeContext( Xp.ModuleConfAtDefRefTo( "StaMd" ) ); #>
<# !LOOP( Xp.ValueAtDefRefTo( "StaMdGeneral/StaMdCPEnable" ) ) #>
/* <#=ValueOf( "." )#> Checkpoint is enabled */
<#CPEnableDic[ValueOf( "." )] = true;#>
<# !ENDLOOP #>

/* Disable all checkpoints that are not enabled */
<# foreach ( KeyValuePair<string, bool> cp in CPEnableDic) {
	 if(false == cp.Value) { #>
#define Rte_Call_<#=cp.Key#>_CheckpointReached()		(void)0 /* Checkpoint disabled */	 
<# } 
} #>
#endif    
#endif /* AP_STAMD_CFG_H */

/*** End of file **************************************************************/
